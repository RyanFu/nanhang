@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Index.cshtml";
}
<script src="/js/moment.js"></script>
<script src="/js/calendar.js"></script>
<script src="/js/locale.js"></script>
<script src="~/Content/js/JSLINQ.js"></script>
<link rel="stylesheet" href="/css/calendar.css" />
<style>
.schedule-grid:after {
  content: ".";
  clear: both;
  display: block;
  overflow: hidden;
  font-size: 0;
  height: 0;
}
.stock, #class-table {
  float: left;
}
.stock {
  width: 20%;
}
#stock .item, #time-helper .item {
    margin: 2px auto;
    width: 120px;
    background-color: #eee;
    text-align: center;
    min-height: 24px;
    line-height: 24px;
    cursor: pointer;
    border: 1px solid #393;
    border-radius: 10px;
}
#class-table {
  width: 80%;
}
#class-table table {
  width: 100%;
  border: 1px solid #cdcdcd;
  border-collapse: separate;
}
#class-table table thead tr {
  background-color: #525252;
  color: #fff;
  font-weight: normal;
}
#class-table table thead tr th {
  height: 30px;
  padding: 3px 6px;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  text-align: center;
  border: 1px solid #ccc;
  font-weight: bold;
}
#class-table table tbody tr td {
  border: 1px solid #ccc;
  vertical-align: top;
  padding: 2px;
  text-align: center;
  height: 36px;
  text-align: center;
  vertical-align: middle !important;
}
#class-table table tbody tr td.error {
  background: #FF4747;
}
#class-table table tbody tr td.success {
  background: #5FE05F;
}
#class-table table tbody .item {
    margin: 2px auto;
    background-color: #eee;
    text-align: center;
    min-height: 24px;
    line-height: 24px;
    cursor: pointer;
    border: 1px solid #393;
    border-radius: 10px;
    width: 70px;
}
#time-helper {
  position: absolute;
}
</style>
<script type="text/javascript">
    $(function () {

        $("#F_Semester").bindSelect({
            url: "/SchoolManage/School_Semester/GetGridSelect",
            id: "F_Id",
            text: "F_Name"
        });
        $("#F_Year").bindSelect({
            dictionary: 'F_Year',
            displayBlank: false
        });
        $("#F_Divis_ID").bindSelect({
            url: "/SystemManage/Organize/GetSelectJsonByCategoryId?keyword=Division",
        });

        $("#F_Divis_ID").change(function () {
            changeDivis();
        });

        //$("#F_Grade_ID").change(function () {
        //    changeClass();
        //});
        //changeDivis();
        //InitTimeTable();
        scheduleByHand.Validate = cellValidate;
        scheduleByHand.changeTdColor = pickUpcellValidate;
        scheduleByHand.init();
        $("#btn_search").click(function () {
            if ($("#F_Grade_ID").val() == "") {
                $.modalAlert("请选择年级！", "warning");
                return;
            }
            if ($("#F_Year").val() == "") {
                $.modalAlert("请选择年度！", "warning");
                return;
            }
            if ($("#F_Semester").val() == "") {
                $.modalAlert("请选择学期！", "warning");
                return;
            }
            //if ($("#F_Class_ID").val() == "") {
            //    $.modalAlert("请选择班级！", "warning");
            //    return;
            //}
            InitTimeTable();
        });
    });

    function changeDivis() {
        $("#F_Grade_ID").find("option").remove();
        $("#F_Grade_ID").bindSelect({
            url: "/SystemManage/Organize/GetSelectJsonByCategoryId?keyword=Grade&parentId=" + $("#F_Divis_ID").val(),
        });
        changeClass();
    }

    function changeClass() {
        $("#F_Class_ID").find("option").remove();
        $("#F_Class_ID").bindSelect({
            url: "/SystemManage/Organize/GetSelectJsonByCategoryId?keyword=Class&parentId=" + $("#F_Grade_ID").val(),
        });
    }

    function InitTimeTable()
    {
        //var tclassTable = new classTable();
        //tclassTable.timeSpanCn = { 'MN': '早晨', 'AM': '上午', 'CM': '中午', 'PM': '下午', 'EN': '晚上' };
        //tclassTable.classHour = getTimeJson();
        //scheduleByHand.tableInstance = tclassTable
        scheduleByHand.tableInstance.loadClassHour(getTimeJson(), null);
        scheduleByHand.init()
        data = getData()
        scheduleByHand.bindNotData(data.notdata);
        scheduleByHand.bindYetData(data.yetdata);
        getTipRule();
    }

    function getTimeJson()
    {
        var F_Semester = $("#F_Semester").val();
        var F_Divis = $("#F_Divis_ID").val();
        var F_Grade = $("#F_Grade_ID").val();
        var F_Year = $("#F_Year").val();

        var hours = { MN:[],AM: [],CM:[], PM: [], EN: [] };
        $.ajax({
            url: "/ScheduleManage/School_ClassArrange/GetTimeJson",
            data: {F_Semester: F_Semester, F_Divis: F_Divis, F_Grade: F_Grade, F_Year: F_Year },
            dataType: "json",
            async: false,
            success: function (data) {
                if (data == null)
                    return hours;
                hours = gethoursTimeJson(hours, 1, data.F_TimeSpan1, data.F_Course_StartTime1, data.F_Course_EndTime1);
                hours = gethoursTimeJson(hours, 2, data.F_TimeSpan2, data.F_Course_StartTime2, data.F_Course_EndTime2);
                hours = gethoursTimeJson(hours, 3, data.F_TimeSpan3, data.F_Course_StartTime3, data.F_Course_EndTime3);
                hours = gethoursTimeJson(hours, 4, data.F_TimeSpan4, data.F_Course_StartTime4, data.F_Course_EndTime4);
                hours = gethoursTimeJson(hours, 5, data.F_TimeSpan5, data.F_Course_StartTime5, data.F_Course_EndTime5);
                hours = gethoursTimeJson(hours, 6, data.F_TimeSpan6, data.F_Course_StartTime6, data.F_Course_EndTime6);
                hours = gethoursTimeJson(hours, 7, data.F_TimeSpan7, data.F_Course_StartTime7, data.F_Course_EndTime7);
                hours = gethoursTimeJson(hours, 8, data.F_TimeSpan8, data.F_Course_StartTime8, data.F_Course_EndTime8);
                hours = gethoursTimeJson(hours, 9, data.F_TimeSpan9, data.F_Course_StartTime9, data.F_Course_EndTime9);
                hours = gethoursTimeJson(hours, 10, data.F_TimeSpan10, data.F_Course_StartTime10, data.F_Course_EndTime10);
                hours = gethoursTimeJson(hours, 11, data.F_TimeSpan11, data.F_Course_StartTime11, data.F_Course_EndTime11);
                hours = gethoursTimeJson(hours, 12, data.F_TimeSpan12, data.F_Course_StartTime12, data.F_Course_EndTime12);
            }
        });
        return hours;
    }
    function gethoursTimeJson(hours, index, timeSpan, timestart, timeend)
    {
        if (timeSpan == "MN")
            hours.MN.push({ ClassHour: index, ClassHourCh: "第" + index + "节", ClassTime: timestart + "-" + timeend });
        if (timeSpan == "CM")
            hours.CM.push({ ClassHour: index, ClassHourCh: "第" + index + "节", ClassTime: timestart + "-" + timeend });
        if (timeSpan == "AM")
            hours.AM.push({ ClassHour: index, ClassHourCh: "第" + index + "节", ClassTime: timestart + "-" + timeend });
        if (timeSpan == "PM")
            hours.PM.push({ ClassHour: index, ClassHourCh: "第" + index + "节", ClassTime: timestart + "-" + timeend });
        if (timeSpan == "EN")
            hours.EN.push({ ClassHour: index, ClassHourCh: "第" + index + "节", ClassTime: timestart + "-" + timeend });
        return hours;
    }

    function getData()
    {
        var obj = { notdata: [], yetdata: [] };
        $.ajax({
            url: "/ScheduleManage/Schedule_MoveClassArrange/GetClassPTimetable?F_Semester=" + $("#F_Semester").val() + "&F_Divis=" + $("#F_Divis_ID").val() + "&F_Grade=" + $("#F_Grade_ID").val() + "&F_Year=" + $("#F_Year").val() + "&F_Class=" + $("#F_Class_ID").val(),
            dataType: "json",
            async: false,
            success: function (data) {
                if (data.length <= 0)
                    return obj;
                var items = data;
                for(var i=0;i<items.length;i++)
                {
                    if (!items[i].F_WeekN) {
                        obj.notdata.push({
                            id: items[i].F_CourseId,
                            teacherId: items[i].F_TeacherId,
                            courseId: items[i].F_CourseId,
                            courseName: items[i].F_CourseName,
                            teacherName: items[i].F_Teacher
                            //,
                            //roomId: 34,
                            //roomName: 'B班5教室',
                        });
                    }
                    else {
                        obj.yetdata.push({
                            dateIndex: items[i].F_WeekN,
                            lessonIndex: items[i].F_CourseIndex,
                            courseName: items[i].F_CourseName,
                            courseId: items[i].F_CourseId,
                            teacherName: items[i].F_Teacher,
                            teacherId: items[i].F_TeacherId
                            //,
                            //roomName: 'B班3教室',
                            //roomId: 114
                        });
                    }

                }
            }
        });
        console.log(obj)
        return obj;
    }
    //function getYetDataJson(datas,day)
    //{
    //    var classes = [];
    //    for(var i=0;i<datas.length;i++)
    //    {
    //        classes.push( {
    //            dateIndex: day,
    //            lessonIndex: datas[i].F_CourseIndex,
    //            courseName: datas[i].F_CourseName,
    //            courseId: datas[i].F_CourseId,
    //            teacherName:datas[i].F_Teacher,
    //            teacherId: datas[i].F_TeacherId
    //            //,
    //            //roomName: 'B班3教室',
    //            //roomId: 114
    //        });
    //    }
    //    return classes;
    //}
    function cellValidate(targetDateIndex, targetLessonIndex, value, teacherId)
    {
        var celldata = JSON.parse(value);
        var msg = cvalidate(targetDateIndex, targetLessonIndex);
        if (msg!=null)
        {
            $.modalAlert(msg, 'warning');
        }
        return true;
    }

    function cvalidate(dateIndex, lessonIndex,F_Class,teacherId) {
        // 年级规则
        var grule = JSLINQ(rules.GradeRule)
                 .Where(function (item) { return item.F_WeekN == dateIndex && item.F_CourseIndex == lessonIndex; }).FirstOrDefault();
        if (grule != null) {
            if (grule.F_Rule == -1)
                return "不排课！";
            if (grule.F_Rule == 10)
                return "只排行政班课！";
        }
        // 课程规则
        var crule = JSLINQ(rules.CourseRule)
                    .Where(function (item) { return item.F_WeekN == dateIndex && item.F_CourseIndex == lessonIndex; });
        if (crule.Count > 0) {
            var frule = crule.Where(function (t) { t => t.F_CourseId == courseid }).FirstOrDefault();
            if (frule != null && frule.F_Rule == -1) {
                return "不排当前课程";
            }
            var frules = crule.Where(function (t) { t => t.F_CourseId != courseid && t.F_Rule != -1 }).FirstOrDefault();
            if (frules != null) {
                var courseF_Name = top.clients.course[frules.F_CourseId] == undefined ? "" : top.clients.course[frules.F_CourseId].F_Name;
                if (frules.F_Rule == 1)
                    return "优先排" + courseF_Name;
                if (frules.F_Rule == 2)
                    return "尽量排" + courseF_Name;
            }
        }
        // 教师规则
        var trule = JSLINQ(rules.TeacherRule)
                    .Where(function (item) { return item.F_WeekN == dateIndex && item.F_CourseIndex == lessonIndex; });
        if (trule.Count > 0) {
            var frule = trule.Where(function (t) { t => t.F_TeacherId == teacherId }).FirstOrDefault();
            if (frule != null && frule.F_Rule == -1) {
                return "不排当前教师";
            }
            //var frules = trule.Where(t => t.F_TeacherId != teacherId && t.F_Rule != -1).FirstOrDefault();
            //if (frules != null) {
            //    var course = new School_Teachers_App().GetForm(frules.F_TeacherId);
            //    if (frules.F_Rule == 1)
            //        return "优先排" + course.F_Name + "教师";
            //    if (frules.F_Rule == 2)
            //        return "尽量排" + course.F_Name + "教师";
            //}
            var teacher = JSLINQ(data)
                 .Where(function (item) { return item.F_WeekN == dateIndex && item.F_CourseIndex == lessonIndex&&item.F_TeacherId==teacherId&& t.F_ClassId != F_Class; }).FirstOrDefault();
            if (teacher!=null)
                return "当前教师已排课！";

            //教师课时限制
            var teacherTimeRule = JSLINQ(rules.TeacherTimeRule)
                 .Where(function (item) { return item.F_TeacherId == teacherId }).FirstOrDefault();
            // 教师是否超出当天课时
            if (teacherTimeRule != null)
            {
                var teacherMaxTime =getDayCourseTime(teacherTimeRule, dateIndex);
                var teacherUseTime = JSLINQ(data)
                 .Where(function (item) { return item.F_WeekN == dateIndex&&item.F_TeacherId==teacherId&& t.F_ClassId != F_Class; }).Count();
                if (teacherUseTime >= teacherMaxTime && teacherUseTime > 0)
                    return "当前教师当天已超出" + teacherMaxTime + "课时！";
            }
        }

        //教师互斥信息
        var teacherExcludeRules = pruleTeacherExcludeApp.GetList(t => t.F_Year == f_Year && t.F_SemesterId == f_Semester && (t.F_Teacher1Id == teacherId || t.F_Teacher2Id == teacherId)).ToList();
        //教师互斥
        foreach (var teacherExcludeRule in teacherExcludeRules)
        {
            string excludeTeacherId = teacherExcludeRule.F_Teacher1Id;
            if (teacherExcludeRule.F_Teacher1Id == teacherId)
            {
                excludeTeacherId = teacherExcludeRule.F_Teacher2Id;
            }
            var teacheruse = service.IQueryable(t => t.F_Year == f_Year && t.F_SemesterId == f_Semester && t.F_TeacherId == excludeTeacherId && t.F_WeekN == dateIndex && t.F_CourseIndex == lessonIndex).FirstOrDefault();
            if (teacheruse != null)
            {
                var teacher = new School_Teachers_App().GetForm(teacheruse.F_Id);
                return "当前教师不能与" + teacher.F_Name + "排在同一节";
            }
        }
        //科目互斥信息
        var courseExcludeRules = pruleCourseExcludeApp.GetList(t => t.F_Year == f_Year && t.F_SemesterId == f_Semester && t.F_ClassId == F_Class && (t.F_Course1Id == courseid || t.F_Course2Id == courseid)).ToList();

        // 科目互斥
        foreach (var courseExcludeRule in courseExcludeRules)
        {
            string excludeCourseId = courseExcludeRule.F_Course1Id;
            if (courseExcludeRule.F_Course1Id == courseid)
            {
                excludeCourseId = courseExcludeRule.F_Course2Id;
            }
            if (courseExcludeRule.F_ExcludeType == 1)
            {
                if (app.GetCoursePTimetable(dateIndex, null, excludeCourseId, f_Year, f_Semester).FirstOrDefault() != null)
                {
                    var course = new School_Course_App().GetForm(excludeCourseId);
                    return "不能与" + course.F_Name + "同一天排课";
                }
            }
            if (courseExcludeRule.F_ExcludeType == 2)
            {
                var fcourse = app.GetCoursePTimetable(dateIndex, (lessonIndex - 1), excludeCourseId, f_Year, f_Semester).FirstOrDefault();
                if (fcourse != null)
                {
                    var course = new School_Course_App().GetForm(excludeCourseId);
                    return "不能排在" + course.F_Name + "后面";
                }
                var lcourse =app. GetCoursePTimetable(dateIndex, (lessonIndex + 1), excludeCourseId, f_Year, f_Semester).FirstOrDefault();
                if (lcourse != null)
                {
                    var course = new School_Course_App().GetForm(excludeCourseId);
                    return "不能排在" + course.F_Name + "前面";
                }
            }
        }
        return null;
    }
    function getDayCourseTime(teacherTimeRule,dateIndex)
    {
        switch(dateIndex)
        {
            case 1:
                return teacherTimeRule.F_Day1CourseTime;
            case 2:
                return teacherTimeRule.F_Day2CourseTime;
            case 3:
                return teacherTimeRule.F_Day3CourseTime;
            case 4:
                return teacherTimeRule.F_Day4CourseTime;
            case 5:
                return teacherTimeRule.F_Day5CourseTime;
            case 6:
                return teacherTimeRule.F_Day6CourseTime;
            case 7:
                return teacherTimeRule.F_Day7CourseTime;
        }
        return 100;
    }
    function pickUpcellValidate(div) { //div为当前拾取的课程DOM,从左侧拾取课程从TD拾取课程都会触发该函数
        //var teacherId = $(div).attr('teacherid')
        //var celldata = JSON.parse($(div).attr('courseid'));
        //var F_Semester = $("#F_Semester").val();
        //var F_Year = $("#F_Year").val();
        //var F_Grade = $("#F_Grade_ID").val();
        //var that = this;
        //$.ajax({
        //    url: "/ScheduleManage/Schedule_MoveClassArrange/pickUpcellValidate",
        //    data: { courseid: celldata.CourseId, teacherId: teacherId, F_Semester: F_Semester, F_Year: F_Year, F_Grade: F_Grade, F_Class: celldata.ClassId },
        //    dataType: "json",
        //    async: false,
        //    success: function (data) {
        //        //console.log(data);
        //        that.clearColor();
        //        $.each(data, function (i, item) {
        //            var dom = that.tableInstance.$container.find('td[id="t_' + item.dateIndex + '_' + item.lessonIndex + '"]');
        //            if (dom != null)
        //                dom.addClass(item.state)
        //        })
        //    }
        //});

    }

    function submitForm(callback) {
        if ($("#F_Grade_ID").val() == "") {
            $.modalAlert("请选择年级！", "warning");
            return;
        }
        if ($("#F_Year").val() == "") {
            $.modalAlert("请选择年度！", "warning");
            return;
        }
        if ($("#F_Semester").val() == "") {
            $.modalAlert("请选择学期！", "warning");
            return;
        }
        //if ($("#F_Class_ID").val() == "") {
        //    $.modalAlert("请选择班级！", "warning");
        //    return;
        //}

        var F_Semester = $("#F_Semester").val();
        var F_Divis = $("#F_Divis_ID").val();
        var F_Grade = $("#F_Grade_ID").val();
        var F_Year = $("#F_Year").val();
        var F_ClassId = $("#F_Class_ID").val();
        var data = scheduleByHand.getPostData();
        console.log(data);
        var postData = { F_Class: F_ClassId, F_Semester: F_Semester, F_Divis: F_Divis, F_Grade: F_Grade, F_Year: F_Year, data: data };

        $.ajax({
            type: "POST",
            url: "/ScheduleManage/Schedule_MoveClassArrange/SubmitClassTimeTable",
            data: JSON.stringify(postData),
            contentType: "application/json",
            dataType: "json",
            success: function (data) {
                if (data.state == "success") {
                    $.modalMsg(data.message, data.state);
                    $.modalClose();
                    callback($("#F_Year").val(), $("#F_Semester").val(), $("#F_Divis_ID").val(), $("#F_Grade_ID").val());
                } else {
                    $.modalAlert(data.message, data.state);
                }
            }
        });
    }

    var rules = null;
    var data=null;
    function getTipRule()
    {
        $.ajax({
            type: "POST",
            url: "/ScheduleManage/Schedule_MoveClassArrange/GetArrangeTip?F_Semester=" + $("#F_Semester").val() + "&F_Divis=" + $("#F_Divis_ID").val() + "&F_Grade=" + $("#F_Grade_ID").val() + "&F_Year=" + $("#F_Year").val() + "&F_Class=" + $("#F_Class_ID").val(),
            contentType: "application/json",
            dataType: "json",
            success: function (objs) {
                rules = objs;
                console.log(rules);
                for (var i = 0; i < rules.CourseRule.length; i++) {
                    var ruleTip = "";
                    var c = rules.CourseRule[i];
                    var courseF_Name = top.clients.course[c.F_CourseId] == undefined ? "" : top.clients.course[c.F_CourseId].F_Name;
                    if (c.F_Rule == -1)
                        ruleTip = "不排"+ courseF_Name;
                    if (c.F_Rule == 1)
                        ruleTip = "优先排" + courseF_Name;
                    if (c.F_Rule == 2)
                        ruleTip = "尽量排" + courseF_Name;
                    setTip(c.F_WeekN, c.F_CourseIndex, c.F_Rule,ruleTip);
                }
                for (var i = 0; i < rules.GradeRule.length; i++) {
                    var ruleTip = "";
                    var c = rules.GradeRule[i];
                    if (c.F_Rule == -1)
                        ruleTip = "不排课";
                    if (c.F_Rule == 10)
                        ruleTip = "排行政班课";
                    if (ruleTip != "") {
                        setTip(c.F_WeekN, c.F_CourseIndex, c.F_Rule, ruleTip);
                    }
                }
            }
        });
        //$('#t_1_1').html('<div id="tip" class="item"> + dictionary[value] +</div>')
    }
    function setTip(F_WeekN, F_CourseIndex, RuleValue, RuleTip)
    {
        var _div = $('#t_' + F_WeekN + '_' + F_CourseIndex);
        if (_div.attr("courseid")) {
            return;
        }
        var bg = "";
        if(RuleValue == -1)
            bg = "red";
        if (RuleValue == 10)
            bg = "#7fc8ba";
        if (RuleValue == 11)
            bg = "#1abc9c";
        _div.html('<div class="item tip" style="color:#ffffff;background-color:' + bg + '"> ' + RuleTip + '</div>')
    }
</script>
<div class="topPanel">
    @*<div class="toolbar">
        <div class="btn-group">
            <a class="btn btn-primary" onclick="$.reload()"><span class="glyphicon glyphicon-refresh"></span></a>
        </div>
        <div class="btn-group">
            <a id="NF-add" authorize="yes" class="btn btn-primary dropdown-text" onclick="btn_AutoArrange()"><i class="fa fa-plus"></i>自动预排</a>
        </div>
    </div>*@
    <div class="search">
        <table>
            <tr>
                <th class="formTitle">搜索：</th>
                <td>
                    <div class="input-group" style="margin-right:10px;width:100px;">
                        <select id="F_Year" name="F_Year" class="form-control">
                            <option value="">选择年度</option>
                        </select>
                    </div>
                </td>
                <td>
                    <div class="input-group" style="margin-right:10px;width:100px;">
                        <select id="F_Semester" name="F_Semester" class="form-control">
                            <option value="">选择学期</option>
                        </select>
                    </div>
                </td>
                <td>
                    <div class="input-group" style="margin-right:10px;width:100px;">
                        <select id="F_Divis_ID" name="F_Divis_ID" class="form-control">
                            <option value="">选择学部</option>
                        </select>
                    </div>
                </td>
                <td>
                    <div class="input-group" style="margin-right:10px;width:100px;">
                        <select id="F_Grade_ID" name="F_Grade_ID" class="form-control">
                            <option value="">选择年级</option>
                        </select>
                    </div>
                </td>
                @*<td>
                    <div class="input-group" style="margin-right:10px;width:100px;">
                        <select id="F_Class_ID" name="F_Class_ID" class="form-control">
                            <option value="">选择班级</option>
                        </select>
                    </div>
                </td>*@
                <td>
                    <div class="input-group">
                        <span class="input-group-btn">
                            <button id="btn_search" type="button" class="btn  btn-primary"><i class="fa fa-search"></i></button>
                        </span>
                    </div>
                </td>
            </tr>
        </table>
    </div>
</div>
<div class="topPanel">
    <div id="calc-height" class="schedule-grid">
        <div class="stock">
            <div class="title" style="text-align:center;font-size:16px;">
                未排入的课
            </div>
            <div id="stock" class="over-flow-div">
            </div>
        </div>
        <div id="class-table">
        </div>
        <div id="time-helper">
        </div>
    </div>
    </div>
    <script>

        var scheduleByHand = {
            stockRoom: $('#stock'),
            tableRoom: $('#class-table'),
            helper: $('#time-helper'),
            tableInstance: new classTable(),
            pickState: 0, // 0为放下，1为从td拾起 . 2 为从仓库拾起
            curCell: null,
            preCell: null,
            append: false, // 放下是替换还是添加
            offsetTop: 71,
            //绑定未排
            bindNotData: function (data) {
                var that = this
                data = data || []
                this.stockRoom.empty()
                $.each(data, function (i, item) {
                    var _item = $('<div>').addClass('item').attr({
                        id: item.id,
                        courseId: item.courseId,
                        teacherId: item.teacherId,
                        roomId: item.roomId
                    }).html(item.courseName + '(' + item.teacherName + ')')
                    that.stockRoom.append(_item)
                })
                this.sortStockRoom()
            },
            //绑定已拍
            bindYetData: function (classes) {

                this.tableInstance.setClasses(classes)
            },
            //验证
            Validate:function(targetDateIndex, targetLessonIndex,courseid, teacherId)
            {

            },
            //将拾起项放入左侧暂存区
            addItemIntoStock: function () {
                var that = this;
                this.pickState = 0;
                this.preCell = this.curCell.removeClass("current")
                this.curCell = this.helper;
                this.helper.hide();
                this.helper.children().each(function () {
                    var _div = $(this)
                    _div.appendTo(that.stockRoom)
                })
                this.clearColor()
                this.sortStockRoom()
            },
            //左侧区域拾起课程
            pickUpItemFromStock: function (div, evt) {
                var that = this
                this.pickState = 2
                this.preCell = this.curCell
                this.curCell = this.helper
                var courseid = div.attr("courseid"), teacherid = div.attr("teacherid"), roomid = div.attr("roomid"),
                  divs = this.stockRoom.find("[courseid='" + courseid + "']")
                this.changeTdColor(divs.eq(0))
                divs.appendTo(that.helper)
                this.helper.show()
                $(document).bind("mousemove.paike", this.moveHelper.bind(this))
            },
            //左侧区域放回课程
            putBackItemToStock: function () {
                this.pickState = 0
                $(document).unbind("mousemove.paike")
                this.addItemIntoStock()
            },
            //还原某被拾起中的项
            putBackCell: function () {
                this.pickState = 0;
                this.preCell = this.curCell.removeClass("current");
                this.curCell = null;
                this.helper.hide();
                var _div = this.helper.children(".item").eq(0), teacherid = _div.attr("teacherid"), _cell = $(this.preCell), _cellid = _cell.attr("id"), arrId = _cellid.split("_"),
                  _week = arrId[1], _classhour = arrId[2], _id = _div.attr("id");
                this.updateCacheData(_id, _week, _classhour, '1');
                _div.appendTo(this.preCell);
                $(document).unbind("mousemove.paike");
            },
            //把当前td的某项div转移到helper去
            createClone: function (cell, div) {
                this.helper.show().append(div);
            },
            //拾起某个td的某项
            pickUpCell: function (cell, div, evt) {
                this.changeTdColor(div)
                //alert("拾起");
                //提示项不可拾起
                if ($(div).hasClass('tip'))
                    return;
                this.pickState = 1;
                this.preCell = this.curCell;
                this.curCell = cell.addClass("current");
                if (this.preCell) this.preCell.removeClass("current");
                this.createClone(cell, div);
                this.helper.css({
                    top: evt.pageY + 10,
                    left: evt.pageX + 10
                });
                $(document).bind("mousemove.paike", this.moveHelper);
                //color field
                var _div = $(div), teacherid = _div.attr("teacherid"), _id = _div.attr("id"), roomid = _div.attr("roomid"),
                    _cellId = cell.attr("id"), _arr = _cellId.split("_"), _week = _arr[1], _classhour = _arr[2];
            },
            //交换模式下放置当前拾起项
            switchCell: function (tCell) {

                var _tdId = this.curCell.attr('id'), _arr = _tdId.split('_'), _week = _arr[1], _classhour = _arr[2], that = this;
                tCell.children().each(function () {
                    var _div = $(this), _id = _div.attr("id");
                    //alert("交换模式" + $(this).attr('id'));
                    //提示项不可拾起
                    if ($(this).hasClass('tip')) {
                        $(this).remove();
                        return;
                    }
                    if (that.append) _div.appendTo(that.curCell);
                    if (that.pickState == 2) that.updateCacheData(_id, '', '', '0');
                    else {
                        that.updateCacheData(_id, _week, _classhour, '1');
                    }
                });
                this.mergeCell(tCell);
            },
            //获取提交数据
            getPostData: function () {
              var output = []
              if (this.tableRoom.find('.item').length) {
                this.tableRoom.find('.item').each(function () {
                  var teacherId = $(this).attr('teacherid')
                  var courseId = $(this).attr('courseid')
                  var dateIndex = $(this).parents('td').attr('id').split('_')[1]
                  var lessonIndex = $(this).parents('td').attr('id').split('_')[2]
                  output.push({
                    teacherId: teacherId,
                    courseId: courseId,
                    dateIndex: dateIndex,
                    lessonIndex: lessonIndex
                  })
                })
              }
              return output
            },
            //左侧排序
            sortStockRoom: function () {
                var _items = this.stockRoom.find(".item").sort(function (a, b) {
                    console.log($(a))
                    var $a = $(a), $b = $(b);
                    var aCourseID = parseInt($a.attr("courseid"), 10) || 0, bCourseID = parseInt($b.attr("courseid"), 10) || 0,
                    aTeacherID = parseInt($a.attr("teacherid"), 10) || 0, bTeacherID = parseInt($b.attr("teacherid"), 10) || 0;
                    return (Math.abs(aCourseID) - Math.abs(bCourseID));
                });
                this.stockRoom.empty().append(_items);
                return this;
            },
            //更新内存中的课表信息
            updateCacheData: function (_id, _week, _classhour, _isok) {

                /**var _data = this.fullData;
                  for (var i in _data) {
                    if (_data[i].ID == _id) {
                      _data[i].Week = _week;
                      _data[i].ClassHour = _classhour;
                      _data[i].IsOK = _isok;
                      return _data[i];
                    }
                  }**/
                return null;
            },
            //合并模式下放置当前拾起项
            mergeCell: function (tCell) {
                var divs = this.helper.children(".item"), _cellid = $(tCell).attr("id"), arrId = _cellid.split("_"),
                  _week = arrId[1], _classhour = arrId[2], that = this;
                var _div = divs.eq(0), _id = _div.attr("id"), _teacherid = _div.attr("teacherid");
                _div.appendTo(tCell);
                that.updateCacheData(_id, _week, _classhour, '1');
                if (this.pickState == 2) {
                    if (divs.length > 1) {
                        _div = divs.eq(1);
                        _teacherid = _div.attr("teacherid");
                        if (_teacherid == '0') _teacherid = 'not';

                    }
                }
                that.changeTdColor(_div)
                if (divs.length == 1) {
                    that.clearColor()
                    this.helper.hide();
                    this.pickState = 0;
                    this.preCell = this.curCell.removeClass("current");
                    this.curCell = null;
                    $(document).unbind("mousemove.paike");
                }

            },
            //修改TD的颜色
            changeTdColor: function (div) { //div为当前拾取的课程DOM,从左侧拾取课程从TD拾取课程都会触发该函数

              var courseId = $(div).attr('courseid')
              var id = $(div).attr('id')
              var teacherId = $(div).attr('teacherid')
              console.log(courseId, id, teacherId)

              var that = this
              this.clearColor()
              alert('改变颜色')
              var data = [{
                lessonIndex: 5,
                dateIndex: 2,
                state: 'success'
              }, {
                lessonIndex: 6,
                dateIndex: 1,
                state: 'error'
              }]
              $.each(data, function (i, item) {
                that.tableInstance.$container.find('td[id="t_' + item.dateIndex +'_'+ item.lessonIndex +'"]').addClass(item.state)
              })
            },
            clearColor: function () {
              this.tableInstance.$container.find('td[id]').removeClass('error success')
            },
            //移动helper
            moveHelper: function (evt) {
                scheduleByHand.helper.css({
                    top: evt.pageY + 10 - this.offsetTop,
                    left: evt.pageX + 10
                });
            },
            init: function () {
                var that = this
                this.tableInstance.init({
                    $container: this.tableRoom
                })
                function resizeH() {
                    var tdHeitht = $("#calc-height").height();
                    $(".over-flow-div").height(tdHeitht);
                }

                resizeH();
                window.onresize = resizeH;
                this.stockRoom.off('click').on('click', function (evt) {
                    if (that.pickState) {
                        that.addItemIntoStock()
                    }
                }).off('contextmenu').on('contextmenu', function (evt) {
                    evt.preventDefault()
                    if (that.pickState == 2) {
                        that.putBackItemToStock(evt)
                    }
                    return false
                }).on('contextmenu', '.item', function (evt) {
                    evt.preventDefault()
                    if (that.pickState === 2) {
                        that.putBackItemToStock(evt)
                    }
                    else {
                        that.pickUpItemFromStock($(evt.target), evt)
                    }
                    return false
                })
                //单元格上点击,可放置拾起项
                this.tableRoom.find('table tbody td').on('click', function (evt) {
                    var $td = $(this)
                    var canDrop = true //是否可放下
                    var targetDateIndex = $(evt.currentTarget).attr('id').split('_')[1] //目标TD的星期数
                    var targetLessonIndex = $(evt.currentTarget).attr('id').split('_')[2] //目标TD的课程编号
                    var divs = that.helper.children('.item')
                    var targetTeacher = divs.eq(0)
                    var teacherId = targetTeacher.attr('teacherid') //拾起的老师ID
                    var courseid = targetTeacher.attr('courseid') //拾起的老师ID
                    if (evt.currentTarget.cellIndex === 0 || evt.currentTarget.cellIndex === 1) return false
                    that.clearColor()
                    if (that.pickState) {
                        //在原td点击
                        if (that.curCell[0] === evt.currentTarget) {
                          that.putBackCell(evt)
                        }
                        else {
                            canDrop = that.Validate(targetDateIndex, targetLessonIndex, courseid, teacherId);
                            //判断是否可以放下
                          if (canDrop) {
                            that.switchCell($(evt.currentTarget))
                          } else {
                            //alert('不能放')
                          }
                        }
                    }
                }).on('contextmenu', function (evt) {
                    if (evt.currentTarget.cellIndex === 0 || evt.currentTarget.cellIndex === 1) return false
                    var cell = $(evt.currentTarget)
                    //当前为捡起状态，放下
                    if (that.pickState) {
                        if (that.pickState == 1) that.putBackCell(evt)
                        else if (that.pickState == 2) that.putBackItemToStock(evt)
                    } //若当前为放下状态，捡起
                    else if ($(evt.target).hasClass("item") && !$(evt.target).hasClass("tip")) {
                        that.pickUpCell(cell, evt.target, evt)
                    }
                    return false
                })
            }
        }
    </script>